package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoAsterix;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresAsterix;

scan with {: return getScanner().next_token(); :};
parser code {: 
   private GestionErroresAsterix errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresAsterix();
   AnalizadorLexicoAsterix alex = (AnalizadorLexicoAsterix)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal TokenValue     intix, boolix, enumix, floatix, pot, vectix, datix, puntocoma, coma,
             integer, floating, galo, romano, menor, mayor, cora, corc, paa, pac,
             lla, llc, mas, menos, mul, div, igual, or, and, dis, asig, 
             meigual, maigual, mod, pow, not, ref, ift, elset, whilix, punto,
             forix, panor, potion, dospuntos, flecha, ret, tabel, stil, id;

non terminal  S, I, DECVAR, VALOR, EXP0, EXP1, EXP2, EXP3, EXP4, EXP5, EXP6, EXP7, EXP8,
              LISTA, LISTAINT, ALIAS, TIPO, STRUCT, STRUCTINT, PROGRAMA, CUERPO,
              SUBPROGRAMAS, MAIN, DEF, SUBPROGRAMA, LARGP, ARG, CALLF, LARGC, IFELSE,
              WHILE, FOR, TAB, STILUS, VALREF, ASIGNATION;

PROGRAMA ::= DEF CUERPO | CUERPO;
CUERPO ::= MAIN | SUBPROGRAMAS MAIN;
SUBPROGRAMAS ::= SUBPROGRAMA | SUBPROGRAMAS SUBPROGRAMA ;
MAIN ::= potion panor paa pac flecha intix lla S ret EXP0 puntocoma llc;
DEF ::= DECVAR puntocoma | DECVAR puntocoma DEF;
DECVAR ::= TIPO id asig VALOR | TIPO id | STRUCT | ALIAS | ASIGNATION; 
ASIGNATION ::= EXP0 asig VALOR; 
S ::= I puntocoma S  | I puntocoma;
I  ::=  DECVAR | FOR | WHILE | IFELSE | STILUS | TAB | CALLF;
VALOR ::= EXP0 | LISTA ;
LISTA ::= lla llc | lla LISTAINT llc;
LISTAINT ::= VALOR | VALOR coma LISTAINT ;
ALIAS ::= datix id TIPO | datix id STRUCT | id id asig VALOR | id id ;
TIPO ::= intix | boolix | enumix | floatix | vectix menor TIPO mayor cora integer corc; 
STRUCT ::= pot id cora STRUCTINT corc;
STRUCTINT ::= DECVAR puntocoma STRUCTINT | DECVAR;
SUBPROGRAMA ::= potion id LARGP lla S llc | potion id LARGP flecha TIPO lla S ret EXP0 puntocoma llc;
LARGP ::= paa pac | paa ARG pac;
ARG ::= id dospuntos VALREF coma ARG | id dospuntos VALREF;
VALREF ::= TIPO | ref TIPO | id | ref id;
CALLF ::= id paa pac | id paa LARGC pac;
LARGC ::= LARGC coma EXP0 | EXP0;
IFELSE ::= ift paa EXP0 pac lla S llc | ift paa EXP0 pac lla S llc elset lla S llc;
WHILE ::= whilix paa EXP0 pac lla S llc;
FOR ::= forix paa TIPO id dospuntos id pac lla S llc;
TAB ::= tabel paa EXP0 pac;
STILUS ::= stil paa EXP0 pac;

EXP0 ::= EXP1 or EXP0 | EXP1;
EXP1 ::= EXP2 and EXP1 | EXP2;
EXP2 ::= EXP3 igual EXP2 | EXP3 dis EXP2 | EXP3;
EXP3 ::= EXP4 meigual EXP3 | EXP4 maigual EXP3 | EXP4 menor EXP3 | EXP4 mayor EXP3 | EXP4;
EXP4 ::= EXP4 mas EXP5 | EXP4 menos EXP5 | EXP5;
EXP5 ::= EXP5 mul EXP6 | EXP5 div EXP6 | EXP5 mod EXP6 | EXP6;
EXP6 ::= not EXP7 | menos EXP6 | EXP7 pow EXP6 | EXP7;
EXP7 ::= EXP7 punto EXP8 | EXP7 cora EXP8 corc | EXP8;
EXP8 ::= id | integer | floating | galo | romano | CALLF | paa EXP0 pac;

