
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoAsterix;
import alex.UnidadLexica;
import alex.TokenValue;
import ast.TablaEtiquetas;
import errors.GestionErroresAsterix;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintacticoAsterix extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ClaseLexica.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintacticoAsterix() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintacticoAsterix(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoAsterix(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\025\004\000\002\002\004\000\002\025" +
    "\003\000\002\026\003\000\002\026\004\000\002\027\003" +
    "\000\002\027\004\000\002\030\016\000\002\031\004\000" +
    "\002\031\005\000\002\004\006\000\002\004\004\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\045" +
    "\005\000\002\002\005\000\002\002\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\005\003\000\002\005\003\000\002\017\004\000\002\017" +
    "\005\000\002\020\003\000\002\020\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\006\000\002\021\004\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\011\000\002\023\007\000\002\024" +
    "\005\000\002\024\003\000\002\032\010\000\002\032\015" +
    "\000\002\033\004\000\002\033\005\000\002\034\007\000" +
    "\002\034\005\000\002\044\003\000\002\044\004\000\002" +
    "\044\003\000\002\044\004\000\002\035\005\000\002\035" +
    "\006\000\002\036\005\000\002\036\003\000\002\037\011" +
    "\000\002\037\015\000\002\040\011\000\002\041\014\000" +
    "\002\042\006\000\002\043\006\000\002\006\005\000\002" +
    "\006\003\000\002\007\005\000\002\007\003\000\002\010" +
    "\005\000\002\010\005\000\002\010\003\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\003\000\002\012\005\000\002\012\005\000\002" +
    "\012\003\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\003\000\002\014\004\000\002\014\004" +
    "\000\002\014\005\000\002\014\003\000\002\015\005\000" +
    "\002\015\006\000\002\015\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\042\004\035\005\012\006\025\007\047\010" +
    "\004\011\034\012\037\015\011\016\026\017\050\020\031" +
    "\025\044\032\036\046\013\056\007\064\023\001\002\000" +
    "\004\064\312\001\002\000\004\002\ufffe\001\002\000\004" +
    "\013\310\001\002\000\006\055\165\064\164\001\002\000" +
    "\004\002\163\001\002\000\056\013\uffa7\014\uffa7\021\uffa7" +
    "\022\uffa7\023\uffa7\024\uffa7\026\uffa7\030\uffa7\031\uffa7\032" +
    "\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7" +
    "\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\053\uffa7\001" +
    "\002\000\020\013\uffdd\014\uffdd\022\uffdd\024\uffdd\026\uffdd" +
    "\027\uffdd\064\uffdd\001\002\000\016\015\011\016\026\017" +
    "\050\020\031\025\044\064\051\001\002\000\006\013\ufff5" +
    "\024\ufff5\001\002\000\004\056\007\001\002\000\004\056" +
    "\ufffc\001\002\000\056\013\uffa9\014\uffa9\021\uffa9\022\uffa9" +
    "\023\uffa9\024\uffa9\026\uffa9\030\uffa9\031\uffa9\032\uffa9\033" +
    "\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9" +
    "\042\uffa9\043\uffa9\044\uffa9\045\uffa9\053\uffa9\001\002\000" +
    "\056\013\uffac\014\uffac\021\uffac\022\uffac\023\154\024\uffac" +
    "\026\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035" +
    "\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac" +
    "\044\uffac\045\153\053\152\001\002\000\050\013\uffb0\014" +
    "\uffb0\021\uffb0\022\uffb0\024\uffb0\026\uffb0\030\uffb0\031\uffb0" +
    "\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\001\002\000\050" +
    "\013\uffb4\014\uffb4\021\uffb4\022\uffb4\024\uffb4\026\uffb4\030" +
    "\uffb4\031\uffb4\032\uffb4\033\140\034\141\035\uffb4\036\uffb4" +
    "\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\137\001" +
    "\002\000\050\021\uffa8\022\uffa8\023\uffa8\025\054\031\uffa8" +
    "\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\053\uffa8" +
    "\064\147\001\002\000\042\013\uffb7\014\uffb7\021\130\022" +
    "\131\024\uffb7\026\uffb7\030\uffb7\031\125\032\127\035\uffb7" +
    "\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\132\043\126\001" +
    "\002\000\020\013\uffdc\014\uffdc\022\uffdc\024\uffdc\026\uffdc" +
    "\027\uffdc\064\uffdc\001\002\000\056\013\uffa6\014\uffa6\021" +
    "\uffa6\022\uffa6\023\uffa6\024\uffa6\026\uffa6\030\uffa6\031\uffa6" +
    "\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\053\uffa6" +
    "\001\002\000\026\013\uffbc\014\uffbc\024\uffbc\026\uffbc\030" +
    "\uffbc\035\121\036\uffbc\037\uffbc\040\122\041\uffbc\001\002" +
    "\000\022\013\uffbf\014\uffbf\024\uffbf\026\uffbf\030\uffbf\036" +
    "\uffbf\037\117\041\uffbf\001\002\000\056\013\uffa4\014\uffa4" +
    "\021\uffa4\022\uffa4\023\uffa4\024\uffa4\026\uffa4\030\uffa4\031" +
    "\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4" +
    "\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\053" +
    "\uffa4\001\002\000\020\013\uffc1\014\uffc1\024\uffc1\026\uffc1" +
    "\030\uffc1\036\115\041\uffc1\001\002\000\004\041\113\001" +
    "\002\000\004\021\105\001\002\000\020\013\uffde\014\uffde" +
    "\022\uffde\024\uffde\026\uffde\027\uffde\064\uffde\001\002\000" +
    "\022\015\011\016\026\017\050\020\031\025\044\032\036" +
    "\046\013\064\051\001\002\000\004\064\101\001\002\000" +
    "\004\056\007\001\002\000\004\002\uffff\001\002\000\004" +
    "\064\063\001\002\000\006\013\ufff4\024\ufff4\001\002\000" +
    "\022\015\011\016\026\017\050\020\031\025\044\032\036" +
    "\046\013\064\051\001\002\000\056\013\uffa3\014\uffa3\021" +
    "\uffa3\022\uffa3\023\uffa3\024\uffa3\026\uffa3\030\uffa3\031\uffa3" +
    "\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040" +
    "\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\053\uffa3" +
    "\001\002\000\006\013\ufff3\024\ufff3\001\002\000\020\013" +
    "\uffdb\014\uffdb\022\uffdb\024\uffdb\026\uffdb\027\uffdb\064\uffdb" +
    "\001\002\000\056\013\uffa5\014\uffa5\021\uffa5\022\uffa5\023" +
    "\uffa5\024\uffa5\026\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5" +
    "\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042" +
    "\uffa5\043\uffa5\044\uffa5\045\uffa5\053\uffa5\001\002\000\060" +
    "\013\uffa8\014\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025" +
    "\054\026\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8" +
    "\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043" +
    "\uffa8\044\uffa8\045\uffa8\053\uffa8\001\002\000\004\026\053" +
    "\001\002\000\056\013\uffa2\014\uffa2\021\uffa2\022\uffa2\023" +
    "\uffa2\024\uffa2\026\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2" +
    "\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042" +
    "\uffa2\043\uffa2\044\uffa2\045\uffa2\053\uffa2\001\002\000\024" +
    "\015\011\016\026\017\050\020\031\025\044\026\057\032" +
    "\036\046\013\064\051\001\002\000\006\014\060\026\061" +
    "\001\002\000\006\014\uffc9\026\uffc9\001\002\000\056\013" +
    "\uffcc\014\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\026\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\045\uffcc\053\uffcc\001\002\000\022\015\011\016\026\017" +
    "\050\020\031\025\044\032\036\046\013\064\051\001\002" +
    "\000\056\013\uffcb\014\uffcb\021\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\026\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043" +
    "\uffcb\044\uffcb\045\uffcb\053\uffcb\001\002\000\006\014\uffca" +
    "\026\uffca\001\002\000\010\013\ufff6\024\ufff6\041\064\001" +
    "\002\000\024\015\011\016\026\017\050\020\031\025\044" +
    "\027\070\032\036\046\013\064\051\001\002\000\012\013" +
    "\uffe7\014\uffe7\024\uffe7\030\uffe7\001\002\000\006\013\ufff7" +
    "\024\ufff7\001\002\000\012\013\uffe8\014\uffe8\024\uffe8\030" +
    "\uffe8\001\002\000\026\015\011\016\026\017\050\020\031" +
    "\025\044\027\070\030\072\032\036\046\013\064\051\001" +
    "\002\000\006\014\075\030\uffe4\001\002\000\012\013\uffe6" +
    "\014\uffe6\024\uffe6\030\uffe6\001\002\000\004\030\074\001" +
    "\002\000\012\013\uffe5\014\uffe5\024\uffe5\030\uffe5\001\002" +
    "\000\024\015\011\016\026\017\050\020\031\025\044\027" +
    "\070\032\036\046\013\064\051\001\002\000\004\030\uffe3" +
    "\001\002\000\004\002\ufffd\001\002\000\004\056\ufffb\001" +
    "\002\000\016\004\035\005\012\006\025\007\047\010\004" +
    "\011\034\001\002\000\006\013\uffe2\024\uffe2\001\002\000" +
    "\006\013\uffe1\024\uffe1\001\002\000\050\013\uffae\014\uffae" +
    "\021\uffae\022\uffae\024\uffae\026\uffae\030\uffae\031\uffae\032" +
    "\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae" +
    "\041\uffae\042\uffae\043\uffae\044\uffae\001\002\000\014\004" +
    "\035\005\012\006\025\007\047\011\034\001\002\000\004" +
    "\022\107\001\002\000\004\023\110\001\002\000\004\015" +
    "\111\001\002\000\004\024\112\001\002\000\020\013\uffda" +
    "\014\uffda\022\uffda\024\uffda\026\uffda\027\uffda\064\uffda\001" +
    "\002\000\024\015\011\016\026\017\050\020\031\025\044" +
    "\027\070\032\036\046\013\064\051\001\002\000\006\013" +
    "\ufff2\024\ufff2\001\002\000\022\015\011\016\026\017\050" +
    "\020\031\025\044\032\036\046\013\064\051\001\002\000" +
    "\016\013\uffc2\014\uffc2\024\uffc2\026\uffc2\030\uffc2\041\uffc2" +
    "\001\002\000\022\015\011\016\026\017\050\020\031\025" +
    "\044\032\036\046\013\064\051\001\002\000\020\013\uffc0" +
    "\014\uffc0\024\uffc0\026\uffc0\030\uffc0\036\uffc0\041\uffc0\001" +
    "\002\000\022\015\011\016\026\017\050\020\031\025\044" +
    "\032\036\046\013\064\051\001\002\000\022\015\011\016" +
    "\026\017\050\020\031\025\044\032\036\046\013\064\051" +
    "\001\002\000\022\013\uffbd\014\uffbd\024\uffbd\026\uffbd\030" +
    "\uffbd\036\uffbd\037\uffbd\041\uffbd\001\002\000\022\013\uffbe" +
    "\014\uffbe\024\uffbe\026\uffbe\030\uffbe\036\uffbe\037\uffbe\041" +
    "\uffbe\001\002\000\022\015\011\016\026\017\050\020\031" +
    "\025\044\032\036\046\013\064\051\001\002\000\022\015" +
    "\011\016\026\017\050\020\031\025\044\032\036\046\013" +
    "\064\051\001\002\000\022\015\011\016\026\017\050\020" +
    "\031\025\044\032\036\046\013\064\051\001\002\000\022" +
    "\015\011\016\026\017\050\020\031\025\044\032\036\046" +
    "\013\064\051\001\002\000\022\015\011\016\026\017\050" +
    "\020\031\025\044\032\036\046\013\064\051\001\002\000" +
    "\022\015\011\016\026\017\050\020\031\025\044\032\036" +
    "\046\013\064\051\001\002\000\026\013\uffbb\014\uffbb\024" +
    "\uffbb\026\uffbb\030\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\001\002\000\026\013\uffb8\014\uffb8\024\uffb8\026" +
    "\uffb8\030\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8" +
    "\001\002\000\026\013\uffb9\014\uffb9\024\uffb9\026\uffb9\030" +
    "\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\001\002" +
    "\000\050\013\uffb5\014\uffb5\021\uffb5\022\uffb5\024\uffb5\026" +
    "\uffb5\030\uffb5\031\uffb5\032\uffb5\033\140\034\141\035\uffb5" +
    "\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044" +
    "\137\001\002\000\022\015\011\016\026\017\050\020\031" +
    "\025\044\032\036\046\013\064\051\001\002\000\022\015" +
    "\011\016\026\017\050\020\031\025\044\032\036\046\013" +
    "\064\051\001\002\000\022\015\011\016\026\017\050\020" +
    "\031\025\044\032\036\046\013\064\051\001\002\000\050" +
    "\013\uffb2\014\uffb2\021\uffb2\022\uffb2\024\uffb2\026\uffb2\030" +
    "\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\001" +
    "\002\000\050\013\uffb3\014\uffb3\021\uffb3\022\uffb3\024\uffb3" +
    "\026\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035" +
    "\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3" +
    "\044\uffb3\001\002\000\050\013\uffb1\014\uffb1\021\uffb1\022" +
    "\uffb1\024\uffb1\026\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042" +
    "\uffb1\043\uffb1\044\uffb1\001\002\000\026\013\uffba\014\uffba" +
    "\024\uffba\026\uffba\030\uffba\035\uffba\036\uffba\037\uffba\040" +
    "\uffba\041\uffba\001\002\000\050\013\uffb6\014\uffb6\021\uffb6" +
    "\022\uffb6\024\uffb6\026\uffb6\030\uffb6\031\uffb6\032\uffb6\033" +
    "\140\034\141\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6" +
    "\042\uffb6\043\uffb6\044\137\001\002\000\010\013\uffdf\024" +
    "\uffdf\041\150\001\002\000\024\015\011\016\026\017\050" +
    "\020\031\025\044\027\070\032\036\046\013\064\051\001" +
    "\002\000\006\013\uffe0\024\uffe0\001\002\000\016\015\011" +
    "\016\026\017\050\020\031\025\044\064\051\001\002\000" +
    "\022\015\011\016\026\017\050\020\031\025\044\032\036" +
    "\046\013\064\051\001\002\000\016\015\011\016\026\017" +
    "\050\020\031\025\044\064\051\001\002\000\004\024\156" +
    "\001\002\000\056\013\uffaa\014\uffaa\021\uffaa\022\uffaa\023" +
    "\uffaa\024\uffaa\026\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa" +
    "\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042" +
    "\uffaa\043\uffaa\044\uffaa\045\uffaa\053\uffaa\001\002\000\050" +
    "\013\uffad\014\uffad\021\uffad\022\uffad\024\uffad\026\uffad\030" +
    "\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad" +
    "\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\001" +
    "\002\000\056\013\uffab\014\uffab\021\uffab\022\uffab\023\uffab" +
    "\024\uffab\026\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034" +
    "\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab" +
    "\043\uffab\044\uffab\045\uffab\053\uffab\001\002\000\004\002" +
    "\001\001\002\000\054\013\uffaf\014\uffaf\021\uffaf\022\uffaf" +
    "\023\154\024\uffaf\026\uffaf\030\uffaf\031\uffaf\032\uffaf\033" +
    "\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf" +
    "\042\uffaf\043\uffaf\044\uffaf\053\152\001\002\000\004\002" +
    "\000\001\002\000\004\025\257\001\002\000\004\025\166" +
    "\001\002\000\004\026\167\001\002\000\004\060\170\001" +
    "\002\000\004\004\171\001\002\000\004\027\172\001\002" +
    "\000\052\004\035\005\012\006\025\007\047\010\004\011" +
    "\034\012\037\015\011\016\026\017\050\020\031\025\044" +
    "\032\036\046\013\050\175\052\176\054\173\062\202\063" +
    "\201\064\023\001\002\000\004\025\245\001\002\000\004" +
    "\013\uffef\001\002\000\004\025\233\001\002\000\004\025" +
    "\225\001\002\000\004\013\uffec\001\002\000\004\013\uffed" +
    "\001\002\000\004\025\222\001\002\000\004\025\217\001" +
    "\002\000\004\013\uffee\001\002\000\004\061\213\001\002" +
    "\000\004\013\uffeb\001\002\000\004\013\uffea\001\002\000" +
    "\004\013\211\001\002\000\046\013\uffe9\021\uffa3\022\uffa3" +
    "\023\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036" +
    "\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3" +
    "\045\uffa3\053\uffa3\001\002\000\056\004\035\005\012\006" +
    "\025\007\047\010\004\011\034\012\037\015\011\016\026" +
    "\017\050\020\031\025\044\030\ufff0\032\036\046\013\050" +
    "\175\052\176\054\173\061\ufff0\062\202\063\201\064\023" +
    "\001\002\000\006\030\ufff1\061\ufff1\001\002\000\022\015" +
    "\011\016\026\017\050\020\031\025\044\032\036\046\013" +
    "\064\051\001\002\000\004\013\215\001\002\000\004\030" +
    "\216\001\002\000\004\002\ufffa\001\002\000\022\015\011" +
    "\016\026\017\050\020\031\025\044\032\036\046\013\064" +
    "\051\001\002\000\004\026\221\001\002\000\004\013\uffc4" +
    "\001\002\000\022\015\011\016\026\017\050\020\031\025" +
    "\044\032\036\046\013\064\051\001\002\000\004\026\224" +
    "\001\002\000\004\013\uffc3\001\002\000\022\015\011\016" +
    "\026\017\050\020\031\025\044\032\036\046\013\064\051" +
    "\001\002\000\004\026\227\001\002\000\004\027\230\001" +
    "\002\000\052\004\035\005\012\006\025\007\047\010\004" +
    "\011\034\012\037\015\011\016\026\017\050\020\031\025" +
    "\044\032\036\046\013\050\175\052\176\054\173\062\202" +
    "\063\201\064\023\001\002\000\004\030\232\001\002\000" +
    "\004\013\uffc6\001\002\000\022\015\011\016\026\017\050" +
    "\020\031\025\044\032\036\046\013\064\051\001\002\000" +
    "\004\026\235\001\002\000\004\027\236\001\002\000\052" +
    "\004\035\005\012\006\025\007\047\010\004\011\034\012" +
    "\037\015\011\016\026\017\050\020\031\025\044\032\036" +
    "\046\013\050\175\052\176\054\173\062\202\063\201\064" +
    "\023\001\002\000\004\030\240\001\002\000\006\013\uffc8" +
    "\051\241\001\002\000\004\027\242\001\002\000\052\004" +
    "\035\005\012\006\025\007\047\010\004\011\034\012\037" +
    "\015\011\016\026\017\050\020\031\025\044\032\036\046" +
    "\013\050\175\052\176\054\173\062\202\063\201\064\023" +
    "\001\002\000\004\030\244\001\002\000\004\013\uffc7\001" +
    "\002\000\014\004\035\005\012\006\025\007\047\011\034" +
    "\001\002\000\004\064\247\001\002\000\004\057\250\001" +
    "\002\000\004\064\251\001\002\000\004\026\252\001\002" +
    "\000\004\027\253\001\002\000\052\004\035\005\012\006" +
    "\025\007\047\010\004\011\034\012\037\015\011\016\026" +
    "\017\050\020\031\025\044\032\036\046\013\050\175\052" +
    "\176\054\173\062\202\063\201\064\023\001\002\000\004" +
    "\030\255\001\002\000\004\013\uffc5\001\002\000\006\027" +
    "\276\060\275\001\002\000\006\026\262\064\260\001\002" +
    "\000\004\057\264\001\002\000\004\026\263\001\002\000" +
    "\006\027\uffd4\060\uffd4\001\002\000\006\027\uffd3\060\uffd3" +
    "\001\002\000\020\004\035\005\012\006\025\007\047\011" +
    "\034\047\270\064\265\001\002\000\006\014\uffce\026\uffce" +
    "\001\002\000\006\014\uffd0\026\uffd0\001\002\000\006\014" +
    "\273\026\uffd1\001\002\000\016\004\035\005\012\006\025" +
    "\007\047\011\034\064\271\001\002\000\006\014\uffcd\026" +
    "\uffcd\001\002\000\006\014\uffcf\026\uffcf\001\002\000\004" +
    "\064\260\001\002\000\004\026\uffd2\001\002\000\014\004" +
    "\035\005\012\006\025\007\047\011\034\001\002\000\052" +
    "\004\035\005\012\006\025\007\047\010\004\011\034\012" +
    "\037\015\011\016\026\017\050\020\031\025\044\032\036" +
    "\046\013\050\175\052\176\054\173\062\202\063\201\064" +
    "\023\001\002\000\004\030\300\001\002\000\004\056\uffd6" +
    "\001\002\000\004\027\302\001\002\000\052\004\035\005" +
    "\012\006\025\007\047\010\004\011\034\012\037\015\011" +
    "\016\026\017\050\020\031\025\044\032\036\046\013\050" +
    "\175\052\176\054\173\062\202\063\201\064\023\001\002" +
    "\000\004\061\304\001\002\000\022\015\011\016\026\017" +
    "\050\020\031\025\044\032\036\046\013\064\051\001\002" +
    "\000\004\013\306\001\002\000\004\030\307\001\002\000" +
    "\004\056\uffd5\001\002\000\042\004\035\005\012\006\025" +
    "\007\047\010\004\011\034\012\037\015\011\016\026\017" +
    "\050\020\031\025\044\032\036\046\013\056\ufff9\064\023" +
    "\001\002\000\004\056\ufff8\001\002\000\004\023\313\001" +
    "\002\000\040\004\035\005\012\006\025\007\047\010\004" +
    "\011\034\012\037\015\011\016\026\017\050\020\031\025" +
    "\044\032\036\046\013\064\023\001\002\000\006\013\317" +
    "\024\uffd7\001\002\000\004\024\316\001\002\000\006\013" +
    "\uffd9\024\uffd9\001\002\000\040\004\035\005\012\006\025" +
    "\007\047\010\004\011\034\012\037\015\011\016\026\017" +
    "\050\020\031\025\044\032\036\046\013\064\023\001\002" +
    "\000\004\024\uffd8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\054\004\005\006\032\007\031\010\027\011" +
    "\026\012\023\013\021\014\020\015\017\016\016\021\042" +
    "\022\041\023\013\025\007\026\040\027\037\030\004\031" +
    "\014\032\015\035\044\045\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\161\016\016\035\044\001\001\000\002\001\001\000" +
    "\012\026\160\027\037\030\004\032\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\103\015\017\016\016\035\044\001\001\000\002\001\001" +
    "\000\006\030\076\032\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\006\051\007\031" +
    "\010\027\011\026\012\023\013\021\014\020\015\017\016" +
    "\016\035\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\006\055\007\031" +
    "\010\027\011\026\012\023\013\021\014\020\015\017\016" +
    "\016\035\044\036\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\006\061\007\031\010" +
    "\027\011\026\012\023\013\021\014\020\015\017\016\016" +
    "\035\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\065\006\066\007\031\010\027" +
    "\011\026\012\023\013\021\014\020\015\017\016\016\017" +
    "\064\035\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\005\070\006\066\007\031\010" +
    "\027\011\026\012\023\013\021\014\020\015\017\016\016" +
    "\017\064\020\072\035\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\005\070\006\066\007\031\010\027\011\026\012\023\013" +
    "\021\014\020\015\017\016\016\017\064\020\075\035\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\101\023\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\005\113\006" +
    "\066\007\031\010\027\011\026\012\023\013\021\014\020" +
    "\015\017\016\016\017\064\035\044\001\001\000\002\001" +
    "\001\000\026\006\115\007\031\010\027\011\026\012\023" +
    "\013\021\014\020\015\017\016\016\035\044\001\001\000" +
    "\002\001\001\000\024\007\117\010\027\011\026\012\023" +
    "\013\021\014\020\015\017\016\016\035\044\001\001\000" +
    "\002\001\001\000\022\010\123\011\026\012\023\013\021" +
    "\014\020\015\017\016\016\035\044\001\001\000\022\010" +
    "\122\011\026\012\023\013\021\014\020\015\017\016\016" +
    "\035\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\013\145\014\020\015\017\016\016\035\044\001\001" +
    "\000\020\011\144\012\023\013\021\014\020\015\017\016" +
    "\016\035\044\001\001\000\014\013\135\014\020\015\017" +
    "\016\016\035\044\001\001\000\020\011\134\012\023\013" +
    "\021\014\020\015\017\016\016\035\044\001\001\000\020" +
    "\011\133\012\023\013\021\014\020\015\017\016\016\035" +
    "\044\001\001\000\020\011\132\012\023\013\021\014\020" +
    "\015\017\016\016\035\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\143\015\017\016\016\035\044\001\001\000\012\014" +
    "\142\015\017\016\016\035\044\001\001\000\012\014\141" +
    "\015\017\016\016\035\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\150\006\066\007" +
    "\031\010\027\011\026\012\023\013\021\014\020\015\017" +
    "\016\016\017\064\035\044\001\001\000\002\001\001\000" +
    "\006\016\157\035\044\001\001\000\012\014\156\015\017" +
    "\016\016\035\044\001\001\000\006\016\154\035\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\255\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\002\203\003\206\004\173\006\032" +
    "\007\031\010\027\011\026\012\023\013\021\014\020\015" +
    "\017\016\016\021\042\022\041\023\013\035\207\037\176" +
    "\040\177\041\202\042\205\043\204\045\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\002\211\003\206\004\173\006\032" +
    "\007\031\010\027\011\026\012\023\013\021\014\020\015" +
    "\017\016\016\021\042\022\041\023\013\035\207\037\176" +
    "\040\177\041\202\042\205\043\204\045\045\001\001\000" +
    "\002\001\001\000\026\006\213\007\031\010\027\011\026" +
    "\012\023\013\021\014\020\015\017\016\016\035\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\006\217\007\031\010\027\011\026\012\023\013" +
    "\021\014\020\015\017\016\016\035\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\006\222\007\031\010" +
    "\027\011\026\012\023\013\021\014\020\015\017\016\016" +
    "\035\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\006\225\007\031\010\027\011\026\012\023\013\021" +
    "\014\020\015\017\016\016\035\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\002\230\003\206\004\173" +
    "\006\032\007\031\010\027\011\026\012\023\013\021\014" +
    "\020\015\017\016\016\021\042\022\041\023\013\035\207" +
    "\037\176\040\177\041\202\042\205\043\204\045\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\006\233" +
    "\007\031\010\027\011\026\012\023\013\021\014\020\015" +
    "\017\016\016\035\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\002\236\003\206\004\173\006\032\007" +
    "\031\010\027\011\026\012\023\013\021\014\020\015\017" +
    "\016\016\021\042\022\041\023\013\035\207\037\176\040" +
    "\177\041\202\042\205\043\204\045\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\002" +
    "\242\003\206\004\173\006\032\007\031\010\027\011\026" +
    "\012\023\013\021\014\020\015\017\016\016\021\042\022" +
    "\041\023\013\035\207\037\176\040\177\041\202\042\205" +
    "\043\204\045\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\002\253\003\206\004\173\006\032\007\031" +
    "\010\027\011\026\012\023\013\021\014\020\015\017\016" +
    "\016\021\042\022\041\023\013\035\207\037\176\040\177" +
    "\041\202\042\205\043\204\045\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\260" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\265\044\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\273\001\001\000\002\001\001\000\004\022" +
    "\300\001\001\000\056\002\276\003\206\004\173\006\032" +
    "\007\031\010\027\011\026\012\023\013\021\014\020\015" +
    "\017\016\016\021\042\022\041\023\013\035\207\037\176" +
    "\040\177\041\202\042\205\043\204\045\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\002\302\003\206\004\173\006\032\007\031\010\027\011" +
    "\026\012\023\013\021\014\020\015\017\016\016\021\042" +
    "\022\041\023\013\035\207\037\176\040\177\041\202\042" +
    "\205\043\204\045\045\001\001\000\002\001\001\000\026" +
    "\006\304\007\031\010\027\011\026\012\023\013\021\014" +
    "\020\015\017\016\016\035\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\004\005\006" +
    "\032\007\031\010\027\011\026\012\023\013\021\014\020" +
    "\015\017\016\016\021\042\022\041\023\013\031\310\035" +
    "\044\045\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\004\313\006\032\007\031\010\027\011\026\012" +
    "\023\013\021\014\020\015\017\016\016\021\042\022\041" +
    "\023\013\024\314\035\044\045\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\004\313" +
    "\006\032\007\031\010\027\011\026\012\023\013\021\014" +
    "\020\015\017\016\016\021\042\022\041\023\013\024\317" +
    "\035\044\045\045\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoAsterix$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoAsterix$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoAsterix$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresAsterix();
   etiquetas = new TablaEtiquetas();
   AnalizadorLexicoAsterix alex = (AnalizadorLexicoAsterix)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresAsterix errores;
   private TablaEtiquetas etiquetas;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintacticoAsterix$actions {
  private final AnalizadorSintacticoAsterix parser;

  /** Constructor */
  CUP$AnalizadorSintacticoAsterix$actions(AnalizadorSintacticoAsterix parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoAsterix$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoAsterix$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoAsterix$parser,
    java.util.Stack            CUP$AnalizadorSintacticoAsterix$stack,
    int                        CUP$AnalizadorSintacticoAsterix$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoAsterix$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoAsterix$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= def cuerpo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("programa",19, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsterix$stack.elementAt(CUP$AnalizadorSintacticoAsterix$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoAsterix$parser.done_parsing();
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= cuerpo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("programa",19, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpo ::= main 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("cuerpo",20, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpo ::= subprogramas main 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("cuerpo",20, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // subprogramas ::= subprograma 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("subprogramas",21, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // subprogramas ::= subprogramas subprograma 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("subprogramas",21, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // main ::= POTION PANOR PAA PAC FLECHA INTIX LLA s RET exp0 PUNTOCOMA LLC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("main",22, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // def ::= decvar PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("def",23, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // def ::= decvar PUNTOCOMA def 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("def",23, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decvar ::= tipo ID ASIG valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("decvar",2, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // decvar ::= tipo ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("decvar",2, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // decvar ::= struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("decvar",2, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decvar ::= alias 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("decvar",2, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decvar ::= asignation 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("decvar",2, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // asignation ::= exp0 ASIG valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("asignation",35, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // s ::= i PUNTOCOMA s 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("s",0, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // s ::= i PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("s",0, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // i ::= decvar 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("i",1, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // i ::= for 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("i",1, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // i ::= while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("i",1, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // i ::= ifelse 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("i",1, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // i ::= stilus 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("i",1, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // i ::= tab 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("i",1, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // i ::= callf 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("i",1, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valor ::= exp0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("valor",3, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // valor ::= lista 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("valor",3, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista ::= LLA LLC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("lista",13, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista ::= LLA listaint LLC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("lista",13, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // listaint ::= valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("listaint",14, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // listaint ::= valor COMA listaint 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("listaint",14, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // alias ::= DATIX ID tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("alias",15, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // alias ::= DATIX ID struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("alias",15, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // alias ::= ID ID ASIG valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("alias",15, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // alias ::= ID ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("alias",15, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipo ::= INTIX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("tipo",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipo ::= BOOLIX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("tipo",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipo ::= ENUMIX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("tipo",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipo ::= FLOATIX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("tipo",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipo ::= VECTIX MENOR tipo MAYOR CORA INTEGER CORC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("tipo",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // struct ::= POT ID CORA structint CORC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("struct",17, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // structint ::= decvar PUNTOCOMA structint 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("structint",18, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // structint ::= decvar 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("structint",18, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // subprograma ::= POTION ID largp LLA s LLC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("subprograma",24, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // subprograma ::= POTION ID largp FLECHA tipo LLA s RET exp0 PUNTOCOMA LLC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("subprograma",24, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // largp ::= PAA PAC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("largp",25, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // largp ::= PAA arg PAC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("largp",25, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arg ::= ID DOSPUNTOS valref COMA arg 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("arg",26, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arg ::= ID DOSPUNTOS valref 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("arg",26, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // valref ::= tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("valref",34, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // valref ::= REF tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("valref",34, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // valref ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("valref",34, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // valref ::= REF ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("valref",34, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // callf ::= ID PAA PAC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("callf",27, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // callf ::= ID PAA largc PAC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("callf",27, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // largc ::= largc COMA exp0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("largc",28, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // largc ::= exp0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("largc",28, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ifelse ::= IF PAA exp0 PAC LLA s LLC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("ifelse",29, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ifelse ::= IF PAA exp0 PAC LLA s LLC ELSE LLA s LLC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("ifelse",29, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // while ::= WHILIX PAA exp0 PAC LLA s LLC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("while",30, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // for ::= FORIX PAA tipo ID DOSPUNTOS ID PAC LLA s LLC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("for",31, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tab ::= TABEL PAA exp0 PAC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("tab",32, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // stilus ::= STIL PAA exp0 PAC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("stilus",33, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp0 ::= exp1 OR exp0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp0",4, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp0 ::= exp1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp0",4, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp1 ::= exp2 AND exp1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp1",5, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp1 ::= exp2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp1",5, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp2 ::= exp3 IGUAL exp2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp2 ::= exp3 DIS exp2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp2 ::= exp3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp3 ::= exp4 MEIGUAL exp3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp3",7, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exp3 ::= exp4 MAIGUAL exp3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp3",7, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exp3 ::= exp4 MENOR exp3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp3",7, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exp3 ::= exp4 MAYOR exp3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp3",7, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exp3 ::= exp4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp3",7, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exp4 ::= exp4 MAS exp5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp4",8, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // exp4 ::= exp4 MENOS exp5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp4",8, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // exp4 ::= exp5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp4",8, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // exp5 ::= exp5 MUL exp6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp5",9, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // exp5 ::= exp5 DIV exp6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp5",9, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // exp5 ::= exp5 MOD exp6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp5",9, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // exp5 ::= exp6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp5",9, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // exp6 ::= NOT exp7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp6",10, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // exp6 ::= MENOS exp6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp6",10, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // exp6 ::= exp7 POW exp6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp6",10, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // exp6 ::= exp7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp6",10, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // exp7 ::= exp7 PUNTO exp8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // exp7 ::= exp7 CORA exp8 CORC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // exp7 ::= exp8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // exp8 ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp8",12, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // exp8 ::= INTEGER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp8",12, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // exp8 ::= FLOATING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp8",12, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // exp8 ::= GALO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp8",12, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // exp8 ::= ROMANO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp8",12, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // exp8 ::= callf 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp8",12, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // exp8 ::= PAA exp0 PAC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("exp8",12, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoAsterix$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoAsterix$do_action(
    int                        CUP$AnalizadorSintacticoAsterix$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoAsterix$parser,
    java.util.Stack            CUP$AnalizadorSintacticoAsterix$stack,
    int                        CUP$AnalizadorSintacticoAsterix$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoAsterix$do_action_part00000000(
                               CUP$AnalizadorSintacticoAsterix$act_num,
                               CUP$AnalizadorSintacticoAsterix$parser,
                               CUP$AnalizadorSintacticoAsterix$stack,
                               CUP$AnalizadorSintacticoAsterix$top);
    }
}

}
