
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoAsterix;
import alex.UnidadLexica;
import errors.GestionErroresAsterix;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintacticoAsterix extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ClaseLexica.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintacticoAsterix() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintacticoAsterix(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoAsterix(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\025\004\000\002\002\004\000\002\025" +
    "\003\000\002\026\003\000\002\026\004\000\002\027\003" +
    "\000\002\027\004\000\002\030\016\000\002\031\004\000" +
    "\002\031\005\000\002\004\006\000\002\004\004\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\045" +
    "\005\000\002\002\005\000\002\002\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\005\003\000\002\005\003\000\002\017\004\000\002\017" +
    "\005\000\002\020\003\000\002\020\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\006\000\002\021\004\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\011\000\002\023\007\000\002\024" +
    "\005\000\002\024\003\000\002\032\010\000\002\032\015" +
    "\000\002\033\004\000\002\033\005\000\002\034\007\000" +
    "\002\034\005\000\002\044\003\000\002\044\004\000\002" +
    "\044\003\000\002\044\004\000\002\035\005\000\002\035" +
    "\006\000\002\036\005\000\002\036\003\000\002\037\011" +
    "\000\002\037\015\000\002\040\011\000\002\041\014\000" +
    "\002\042\006\000\002\043\006\000\002\006\005\000\002" +
    "\006\003\000\002\007\005\000\002\007\003\000\002\010" +
    "\005\000\002\010\005\000\002\010\003\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\003\000\002\012\005\000\002\012\005\000\002" +
    "\012\003\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\003\000\002\014\004\000\002\014\004" +
    "\000\002\014\005\000\002\014\003\000\002\015\005\000" +
    "\002\015\006\000\002\015\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\042\004\036\005\015\006\024\007\047\010" +
    "\005\011\035\012\040\015\013\016\026\017\050\020\031" +
    "\025\043\032\037\046\016\056\007\064\022\001\002\000" +
    "\056\013\uffa3\014\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3" +
    "\026\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035" +
    "\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3" +
    "\044\uffa3\045\uffa3\053\uffa3\001\002\000\004\064\312\001" +
    "\002\000\004\064\307\001\002\000\006\055\164\064\163" +
    "\001\002\000\004\056\007\001\002\000\004\002\160\001" +
    "\002\000\004\056\ufffc\001\002\000\056\013\uffa7\014\uffa7" +
    "\021\uffa7\022\uffa7\023\uffa7\024\uffa7\026\uffa7\030\uffa7\031" +
    "\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7" +
    "\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\053" +
    "\uffa7\001\002\000\004\002\uffff\001\002\000\020\013\uffdd" +
    "\014\uffdd\022\uffdd\024\uffdd\026\uffdd\027\uffdd\064\uffdd\001" +
    "\002\000\016\015\013\016\026\017\050\020\031\025\043" +
    "\064\053\001\002\000\056\013\uffa9\014\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\024\uffa9\026\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041" +
    "\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\053\uffa9\001\002" +
    "\000\004\002\ufffe\001\002\000\056\013\uffac\014\uffac\021" +
    "\uffac\022\uffac\023\152\024\uffac\026\uffac\030\uffac\031\uffac" +
    "\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040" +
    "\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\151\053\150" +
    "\001\002\000\050\021\uffa8\022\uffa8\023\uffa8\025\054\031" +
    "\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8" +
    "\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\053" +
    "\uffa8\064\145\001\002\000\050\013\uffb0\014\uffb0\021\uffb0" +
    "\022\uffb0\024\uffb0\026\uffb0\030\uffb0\031\uffb0\032\uffb0\033" +
    "\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0" +
    "\042\uffb0\043\uffb0\044\uffb0\001\002\000\020\013\uffdc\014" +
    "\uffdc\022\uffdc\024\uffdc\026\uffdc\027\uffdc\064\uffdc\001\002" +
    "\000\050\013\uffb4\014\uffb4\021\uffb4\022\uffb4\024\uffb4\026" +
    "\uffb4\030\uffb4\031\uffb4\032\uffb4\033\136\034\137\035\uffb4" +
    "\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044" +
    "\135\001\002\000\056\013\uffa6\014\uffa6\021\uffa6\022\uffa6" +
    "\023\uffa6\024\uffa6\026\uffa6\030\uffa6\031\uffa6\032\uffa6\033" +
    "\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6" +
    "\042\uffa6\043\uffa6\044\uffa6\045\uffa6\053\uffa6\001\002\000" +
    "\042\013\uffb7\014\uffb7\021\126\022\127\024\uffb7\026\uffb7" +
    "\030\uffb7\031\123\032\125\035\uffb7\036\uffb7\037\uffb7\040" +
    "\uffb7\041\uffb7\042\130\043\124\001\002\000\026\013\uffbc" +
    "\014\uffbc\024\uffbc\026\uffbc\030\uffbc\035\117\036\uffbc\037" +
    "\uffbc\040\120\041\uffbc\001\002\000\056\013\uffa4\014\uffa4" +
    "\021\uffa4\022\uffa4\023\uffa4\024\uffa4\026\uffa4\030\uffa4\031" +
    "\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4" +
    "\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\053" +
    "\uffa4\001\002\000\022\013\uffbf\014\uffbf\024\uffbf\026\uffbf" +
    "\030\uffbf\036\uffbf\037\115\041\uffbf\001\002\000\020\013" +
    "\uffc1\014\uffc1\024\uffc1\026\uffc1\030\uffc1\036\113\041\uffc1" +
    "\001\002\000\004\041\100\001\002\000\004\021\072\001" +
    "\002\000\020\013\uffde\014\uffde\022\uffde\024\uffde\026\uffde" +
    "\027\uffde\064\uffde\001\002\000\022\015\013\016\026\017" +
    "\050\020\031\025\043\032\037\046\016\064\053\001\002" +
    "\000\004\064\066\001\002\000\006\013\ufff3\024\ufff3\001" +
    "\002\000\004\013\064\001\002\000\022\015\013\016\026" +
    "\017\050\020\031\025\043\032\037\046\016\064\053\001" +
    "\002\000\004\056\007\001\002\000\006\013\ufff4\024\ufff4" +
    "\001\002\000\006\013\ufff5\024\ufff5\001\002\000\020\013" +
    "\uffdb\014\uffdb\022\uffdb\024\uffdb\026\uffdb\027\uffdb\064\uffdb" +
    "\001\002\000\056\013\uffa5\014\uffa5\021\uffa5\022\uffa5\023" +
    "\uffa5\024\uffa5\026\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5" +
    "\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042" +
    "\uffa5\043\uffa5\044\uffa5\045\uffa5\053\uffa5\001\002\000\004" +
    "\002\001\001\002\000\004\026\063\001\002\000\060\013" +
    "\uffa8\014\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\054" +
    "\026\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035" +
    "\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8" +
    "\044\uffa8\045\uffa8\053\uffa8\001\002\000\024\015\013\016" +
    "\026\017\050\020\031\025\043\026\057\032\037\046\016" +
    "\064\053\001\002\000\006\014\uffc9\026\uffc9\001\002\000" +
    "\006\014\060\026\061\001\002\000\056\013\uffcc\014\uffcc" +
    "\021\uffcc\022\uffcc\023\uffcc\024\uffcc\026\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\053" +
    "\uffcc\001\002\000\022\015\013\016\026\017\050\020\031" +
    "\025\043\032\037\046\016\064\053\001\002\000\056\013" +
    "\uffcb\014\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\026\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb" +
    "\045\uffcb\053\uffcb\001\002\000\006\014\uffca\026\uffca\001" +
    "\002\000\056\013\uffa2\014\uffa2\021\uffa2\022\uffa2\023\uffa2" +
    "\024\uffa2\026\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034" +
    "\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2" +
    "\043\uffa2\044\uffa2\045\uffa2\053\uffa2\001\002\000\042\004" +
    "\036\005\015\006\024\007\047\010\005\011\035\012\040" +
    "\015\013\016\026\017\050\020\031\025\043\032\037\046" +
    "\016\056\ufff9\064\022\001\002\000\004\056\ufff8\001\002" +
    "\000\016\004\036\005\015\006\024\007\047\010\005\011" +
    "\035\001\002\000\006\013\uffe1\024\uffe1\001\002\000\006" +
    "\013\uffe2\024\uffe2\001\002\000\050\013\uffae\014\uffae\021" +
    "\uffae\022\uffae\024\uffae\026\uffae\030\uffae\031\uffae\032\uffae" +
    "\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041" +
    "\uffae\042\uffae\043\uffae\044\uffae\001\002\000\014\004\036" +
    "\005\015\006\024\007\047\011\035\001\002\000\004\022" +
    "\074\001\002\000\004\023\075\001\002\000\004\015\076" +
    "\001\002\000\004\024\077\001\002\000\020\013\uffda\014" +
    "\uffda\022\uffda\024\uffda\026\uffda\027\uffda\064\uffda\001\002" +
    "\000\024\015\013\016\026\017\050\020\031\025\043\027" +
    "\102\032\037\046\016\064\053\001\002\000\012\013\uffe8" +
    "\014\uffe8\024\uffe8\030\uffe8\001\002\000\026\015\013\016" +
    "\026\017\050\020\031\025\043\027\102\030\105\032\037" +
    "\046\016\064\053\001\002\000\012\013\uffe7\014\uffe7\024" +
    "\uffe7\030\uffe7\001\002\000\006\013\ufff2\024\ufff2\001\002" +
    "\000\012\013\uffe6\014\uffe6\024\uffe6\030\uffe6\001\002\000" +
    "\004\030\112\001\002\000\006\014\110\030\uffe4\001\002" +
    "\000\024\015\013\016\026\017\050\020\031\025\043\027" +
    "\102\032\037\046\016\064\053\001\002\000\004\030\uffe3" +
    "\001\002\000\012\013\uffe5\014\uffe5\024\uffe5\030\uffe5\001" +
    "\002\000\022\015\013\016\026\017\050\020\031\025\043" +
    "\032\037\046\016\064\053\001\002\000\016\013\uffc2\014" +
    "\uffc2\024\uffc2\026\uffc2\030\uffc2\041\uffc2\001\002\000\022" +
    "\015\013\016\026\017\050\020\031\025\043\032\037\046" +
    "\016\064\053\001\002\000\020\013\uffc0\014\uffc0\024\uffc0" +
    "\026\uffc0\030\uffc0\036\uffc0\041\uffc0\001\002\000\022\015" +
    "\013\016\026\017\050\020\031\025\043\032\037\046\016" +
    "\064\053\001\002\000\022\015\013\016\026\017\050\020" +
    "\031\025\043\032\037\046\016\064\053\001\002\000\022" +
    "\013\uffbd\014\uffbd\024\uffbd\026\uffbd\030\uffbd\036\uffbd\037" +
    "\uffbd\041\uffbd\001\002\000\022\013\uffbe\014\uffbe\024\uffbe" +
    "\026\uffbe\030\uffbe\036\uffbe\037\uffbe\041\uffbe\001\002\000" +
    "\022\015\013\016\026\017\050\020\031\025\043\032\037" +
    "\046\016\064\053\001\002\000\022\015\013\016\026\017" +
    "\050\020\031\025\043\032\037\046\016\064\053\001\002" +
    "\000\022\015\013\016\026\017\050\020\031\025\043\032" +
    "\037\046\016\064\053\001\002\000\022\015\013\016\026" +
    "\017\050\020\031\025\043\032\037\046\016\064\053\001" +
    "\002\000\022\015\013\016\026\017\050\020\031\025\043" +
    "\032\037\046\016\064\053\001\002\000\022\015\013\016" +
    "\026\017\050\020\031\025\043\032\037\046\016\064\053" +
    "\001\002\000\026\013\uffbb\014\uffbb\024\uffbb\026\uffbb\030" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\001\002" +
    "\000\026\013\uffb8\014\uffb8\024\uffb8\026\uffb8\030\uffb8\035" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\001\002\000\026" +
    "\013\uffb9\014\uffb9\024\uffb9\026\uffb9\030\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\001\002\000\050\013\uffb5" +
    "\014\uffb5\021\uffb5\022\uffb5\024\uffb5\026\uffb5\030\uffb5\031" +
    "\uffb5\032\uffb5\033\136\034\137\035\uffb5\036\uffb5\037\uffb5" +
    "\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\135\001\002\000" +
    "\022\015\013\016\026\017\050\020\031\025\043\032\037" +
    "\046\016\064\053\001\002\000\022\015\013\016\026\017" +
    "\050\020\031\025\043\032\037\046\016\064\053\001\002" +
    "\000\022\015\013\016\026\017\050\020\031\025\043\032" +
    "\037\046\016\064\053\001\002\000\050\013\uffb2\014\uffb2" +
    "\021\uffb2\022\uffb2\024\uffb2\026\uffb2\030\uffb2\031\uffb2\032" +
    "\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\041\uffb2\042\uffb2\043\uffb2\044\uffb2\001\002\000\050\013" +
    "\uffb3\014\uffb3\021\uffb3\022\uffb3\024\uffb3\026\uffb3\030\uffb3" +
    "\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037" +
    "\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\001\002" +
    "\000\050\013\uffb1\014\uffb1\021\uffb1\022\uffb1\024\uffb1\026" +
    "\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044" +
    "\uffb1\001\002\000\026\013\uffba\014\uffba\024\uffba\026\uffba" +
    "\030\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\001" +
    "\002\000\050\013\uffb6\014\uffb6\021\uffb6\022\uffb6\024\uffb6" +
    "\026\uffb6\030\uffb6\031\uffb6\032\uffb6\033\136\034\137\035" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6" +
    "\044\135\001\002\000\010\013\uffdf\024\uffdf\041\146\001" +
    "\002\000\024\015\013\016\026\017\050\020\031\025\043" +
    "\027\102\032\037\046\016\064\053\001\002\000\006\013" +
    "\uffe0\024\uffe0\001\002\000\016\015\013\016\026\017\050" +
    "\020\031\025\043\064\053\001\002\000\022\015\013\016" +
    "\026\017\050\020\031\025\043\032\037\046\016\064\053" +
    "\001\002\000\016\015\013\016\026\017\050\020\031\025" +
    "\043\064\053\001\002\000\004\024\154\001\002\000\056" +
    "\013\uffaa\014\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\026" +
    "\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa" +
    "\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044" +
    "\uffaa\045\uffaa\053\uffaa\001\002\000\050\013\uffad\014\uffad" +
    "\021\uffad\022\uffad\024\uffad\026\uffad\030\uffad\031\uffad\032" +
    "\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad" +
    "\041\uffad\042\uffad\043\uffad\044\uffad\001\002\000\056\013" +
    "\uffab\014\uffab\021\uffab\022\uffab\023\uffab\024\uffab\026\uffab" +
    "\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036" +
    "\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab" +
    "\045\uffab\053\uffab\001\002\000\054\013\uffaf\014\uffaf\021" +
    "\uffaf\022\uffaf\023\152\024\uffaf\026\uffaf\030\uffaf\031\uffaf" +
    "\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040" +
    "\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\053\150\001\002" +
    "\000\004\002\000\001\002\000\004\056\ufffb\001\002\000" +
    "\004\002\ufffd\001\002\000\004\025\256\001\002\000\004" +
    "\025\165\001\002\000\004\026\166\001\002\000\004\060" +
    "\167\001\002\000\004\004\170\001\002\000\004\027\171" +
    "\001\002\000\052\004\036\005\015\006\024\007\047\010" +
    "\005\011\035\012\040\015\013\016\026\017\050\020\031" +
    "\025\043\032\037\046\016\050\202\052\203\054\173\062" +
    "\206\063\205\064\022\001\002\000\046\013\uffe9\021\uffa3" +
    "\022\uffa3\023\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035" +
    "\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3" +
    "\044\uffa3\045\uffa3\053\uffa3\001\002\000\004\025\244\001" +
    "\002\000\004\061\240\001\002\000\004\013\236\001\002" +
    "\000\004\013\uffec\001\002\000\004\013\uffee\001\002\000" +
    "\004\013\uffea\001\002\000\004\013\uffeb\001\002\000\004" +
    "\025\224\001\002\000\004\025\216\001\002\000\004\013" +
    "\uffef\001\002\000\004\025\213\001\002\000\004\025\210" +
    "\001\002\000\004\013\uffed\001\002\000\022\015\013\016" +
    "\026\017\050\020\031\025\043\032\037\046\016\064\053" +
    "\001\002\000\004\026\212\001\002\000\004\013\uffc4\001" +
    "\002\000\022\015\013\016\026\017\050\020\031\025\043" +
    "\032\037\046\016\064\053\001\002\000\004\026\215\001" +
    "\002\000\004\013\uffc3\001\002\000\022\015\013\016\026" +
    "\017\050\020\031\025\043\032\037\046\016\064\053\001" +
    "\002\000\004\026\220\001\002\000\004\027\221\001\002" +
    "\000\052\004\036\005\015\006\024\007\047\010\005\011" +
    "\035\012\040\015\013\016\026\017\050\020\031\025\043" +
    "\032\037\046\016\050\202\052\203\054\173\062\206\063" +
    "\205\064\022\001\002\000\004\030\223\001\002\000\004" +
    "\013\uffc6\001\002\000\022\015\013\016\026\017\050\020" +
    "\031\025\043\032\037\046\016\064\053\001\002\000\004" +
    "\026\226\001\002\000\004\027\227\001\002\000\052\004" +
    "\036\005\015\006\024\007\047\010\005\011\035\012\040" +
    "\015\013\016\026\017\050\020\031\025\043\032\037\046" +
    "\016\050\202\052\203\054\173\062\206\063\205\064\022" +
    "\001\002\000\004\030\231\001\002\000\006\013\uffc8\051" +
    "\232\001\002\000\004\027\233\001\002\000\052\004\036" +
    "\005\015\006\024\007\047\010\005\011\035\012\040\015" +
    "\013\016\026\017\050\020\031\025\043\032\037\046\016" +
    "\050\202\052\203\054\173\062\206\063\205\064\022\001" +
    "\002\000\004\030\235\001\002\000\004\013\uffc7\001\002" +
    "\000\056\004\036\005\015\006\024\007\047\010\005\011" +
    "\035\012\040\015\013\016\026\017\050\020\031\025\043" +
    "\030\ufff0\032\037\046\016\050\202\052\203\054\173\061" +
    "\ufff0\062\206\063\205\064\022\001\002\000\006\030\ufff1" +
    "\061\ufff1\001\002\000\022\015\013\016\026\017\050\020" +
    "\031\025\043\032\037\046\016\064\053\001\002\000\004" +
    "\013\242\001\002\000\004\030\243\001\002\000\004\002" +
    "\ufffa\001\002\000\014\004\036\005\015\006\024\007\047" +
    "\011\035\001\002\000\004\064\246\001\002\000\004\057" +
    "\247\001\002\000\004\064\250\001\002\000\004\026\251" +
    "\001\002\000\004\027\252\001\002\000\052\004\036\005" +
    "\015\006\024\007\047\010\005\011\035\012\040\015\013" +
    "\016\026\017\050\020\031\025\043\032\037\046\016\050" +
    "\202\052\203\054\173\062\206\063\205\064\022\001\002" +
    "\000\004\030\254\001\002\000\004\013\uffc5\001\002\000" +
    "\006\027\275\060\274\001\002\000\006\026\260\064\257" +
    "\001\002\000\004\057\263\001\002\000\006\027\uffd4\060" +
    "\uffd4\001\002\000\004\026\262\001\002\000\006\027\uffd3" +
    "\060\uffd3\001\002\000\020\004\036\005\015\006\024\007" +
    "\047\011\035\047\267\064\264\001\002\000\006\014\uffce" +
    "\026\uffce\001\002\000\006\014\uffd0\026\uffd0\001\002\000" +
    "\006\014\272\026\uffd1\001\002\000\016\004\036\005\015" +
    "\006\024\007\047\011\035\064\270\001\002\000\006\014" +
    "\uffcd\026\uffcd\001\002\000\006\014\uffcf\026\uffcf\001\002" +
    "\000\004\064\257\001\002\000\004\026\uffd2\001\002\000" +
    "\014\004\036\005\015\006\024\007\047\011\035\001\002" +
    "\000\052\004\036\005\015\006\024\007\047\010\005\011" +
    "\035\012\040\015\013\016\026\017\050\020\031\025\043" +
    "\032\037\046\016\050\202\052\203\054\173\062\206\063" +
    "\205\064\022\001\002\000\004\030\277\001\002\000\004" +
    "\056\uffd6\001\002\000\004\027\301\001\002\000\052\004" +
    "\036\005\015\006\024\007\047\010\005\011\035\012\040" +
    "\015\013\016\026\017\050\020\031\025\043\032\037\046" +
    "\016\050\202\052\203\054\173\062\206\063\205\064\022" +
    "\001\002\000\004\061\303\001\002\000\022\015\013\016" +
    "\026\017\050\020\031\025\043\032\037\046\016\064\053" +
    "\001\002\000\004\013\305\001\002\000\004\030\306\001" +
    "\002\000\004\056\uffd5\001\002\000\010\013\ufff6\024\ufff6" +
    "\041\310\001\002\000\024\015\013\016\026\017\050\020" +
    "\031\025\043\027\102\032\037\046\016\064\053\001\002" +
    "\000\006\013\ufff7\024\ufff7\001\002\000\004\023\313\001" +
    "\002\000\040\004\036\005\015\006\024\007\047\010\005" +
    "\011\035\012\040\015\013\016\026\017\050\020\031\025" +
    "\043\032\037\046\016\064\022\001\002\000\006\013\317" +
    "\024\uffd7\001\002\000\004\024\316\001\002\000\006\013" +
    "\uffd9\024\uffd9\001\002\000\040\004\036\005\015\006\024" +
    "\007\047\010\005\011\035\012\040\015\013\016\026\017" +
    "\050\020\031\025\043\032\037\046\016\064\022\001\002" +
    "\000\004\024\uffd8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\054\004\041\006\033\007\032\010\031\011" +
    "\027\012\026\013\024\014\022\015\020\016\016\021\044" +
    "\022\005\023\045\025\010\026\013\027\007\030\017\031" +
    "\043\032\011\035\003\045\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\030\161\032\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\156\016\016\035\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\070\015\020\016\016\035\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\006\051\007" +
    "\032\010\031\011\027\012\026\013\024\014\022\015\020" +
    "\016\016\035\003\001\001\000\012\026\050\027\007\030" +
    "\017\032\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\006\054\007\032" +
    "\010\031\011\027\012\026\013\024\014\022\015\020\016" +
    "\016\035\003\036\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\006\061\007\032\010" +
    "\031\011\027\012\026\013\024\014\022\015\020\016\016" +
    "\035\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\004\041\006\033\007\032\010\031" +
    "\011\027\012\026\013\024\014\022\015\020\016\016\021" +
    "\044\022\005\023\045\031\064\035\003\045\040\001\001" +
    "\000\002\001\001\000\006\022\067\023\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\103\006\100\007\032\010\031\011\027\012\026\013" +
    "\024\014\022\015\020\016\016\017\102\035\003\001\001" +
    "\000\002\001\001\000\034\005\106\006\100\007\032\010" +
    "\031\011\027\012\026\013\024\014\022\015\020\016\016" +
    "\017\102\020\105\035\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\005\106\006\100\007\032\010\031\011" +
    "\027\012\026\013\024\014\022\015\020\016\016\017\102" +
    "\020\110\035\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\006\113\007\032\010\031\011\027\012\026" +
    "\013\024\014\022\015\020\016\016\035\003\001\001\000" +
    "\002\001\001\000\024\007\115\010\031\011\027\012\026" +
    "\013\024\014\022\015\020\016\016\035\003\001\001\000" +
    "\002\001\001\000\022\010\121\011\027\012\026\013\024" +
    "\014\022\015\020\016\016\035\003\001\001\000\022\010" +
    "\120\011\027\012\026\013\024\014\022\015\020\016\016" +
    "\035\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\013\143\014\022\015\020\016\016\035\003\001\001" +
    "\000\020\011\142\012\026\013\024\014\022\015\020\016" +
    "\016\035\003\001\001\000\014\013\133\014\022\015\020" +
    "\016\016\035\003\001\001\000\020\011\132\012\026\013" +
    "\024\014\022\015\020\016\016\035\003\001\001\000\020" +
    "\011\131\012\026\013\024\014\022\015\020\016\016\035" +
    "\003\001\001\000\020\011\130\012\026\013\024\014\022" +
    "\015\020\016\016\035\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\141\015\020\016\016\035\003\001\001\000\012\014" +
    "\140\015\020\016\016\035\003\001\001\000\012\014\137" +
    "\015\020\016\016\035\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\146\006\100\007" +
    "\032\010\031\011\027\012\026\013\024\014\022\015\020" +
    "\016\016\017\102\035\003\001\001\000\002\001\001\000" +
    "\006\016\155\035\003\001\001\000\012\014\154\015\020" +
    "\016\016\035\003\001\001\000\006\016\152\035\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\002\173\003\174" +
    "\004\203\006\033\007\032\010\031\011\027\012\026\013" +
    "\024\014\022\015\020\016\016\021\044\022\005\023\045" +
    "\035\171\037\175\040\206\041\176\042\177\043\200\045" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\006\210\007\032" +
    "\010\031\011\027\012\026\013\024\014\022\015\020\016" +
    "\016\035\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\006\213\007\032\010\031\011\027\012\026\013" +
    "\024\014\022\015\020\016\016\035\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\006\216\007\032\010" +
    "\031\011\027\012\026\013\024\014\022\015\020\016\016" +
    "\035\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\002\221\003\174\004\203\006\033\007\032\010\031" +
    "\011\027\012\026\013\024\014\022\015\020\016\016\021" +
    "\044\022\005\023\045\035\171\037\175\040\206\041\176" +
    "\042\177\043\200\045\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\006\224\007\032\010\031\011\027" +
    "\012\026\013\024\014\022\015\020\016\016\035\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\002\227" +
    "\003\174\004\203\006\033\007\032\010\031\011\027\012" +
    "\026\013\024\014\022\015\020\016\016\021\044\022\005" +
    "\023\045\035\171\037\175\040\206\041\176\042\177\043" +
    "\200\045\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\002\233\003\174\004\203\006" +
    "\033\007\032\010\031\011\027\012\026\013\024\014\022" +
    "\015\020\016\016\021\044\022\005\023\045\035\171\037" +
    "\175\040\206\041\176\042\177\043\200\045\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\002\236\003" +
    "\174\004\203\006\033\007\032\010\031\011\027\012\026" +
    "\013\024\014\022\015\020\016\016\021\044\022\005\023" +
    "\045\035\171\037\175\040\206\041\176\042\177\043\200" +
    "\045\040\001\001\000\002\001\001\000\026\006\240\007" +
    "\032\010\031\011\027\012\026\013\024\014\022\015\020" +
    "\016\016\035\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\244\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\002\252\003\174\004\203" +
    "\006\033\007\032\010\031\011\027\012\026\013\024\014" +
    "\022\015\020\016\016\021\044\022\005\023\045\035\171" +
    "\037\175\040\206\041\176\042\177\043\200\045\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\264" +
    "\044\265\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\270\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\272\001\001\000\002\001" +
    "\001\000\004\022\277\001\001\000\056\002\275\003\174" +
    "\004\203\006\033\007\032\010\031\011\027\012\026\013" +
    "\024\014\022\015\020\016\016\021\044\022\005\023\045" +
    "\035\171\037\175\040\206\041\176\042\177\043\200\045" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\002\301\003\174\004\203\006\033\007" +
    "\032\010\031\011\027\012\026\013\024\014\022\015\020" +
    "\016\016\021\044\022\005\023\045\035\171\037\175\040" +
    "\206\041\176\042\177\043\200\045\040\001\001\000\002" +
    "\001\001\000\026\006\303\007\032\010\031\011\027\012" +
    "\026\013\024\014\022\015\020\016\016\035\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\310\006\100\007\032\010\031" +
    "\011\027\012\026\013\024\014\022\015\020\016\016\017" +
    "\102\035\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\004\313\006\033\007\032\010\031\011\027\012" +
    "\026\013\024\014\022\015\020\016\016\021\044\022\005" +
    "\023\045\024\314\035\003\045\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\004\313" +
    "\006\033\007\032\010\031\011\027\012\026\013\024\014" +
    "\022\015\020\016\016\021\044\022\005\023\045\024\317" +
    "\035\003\045\040\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoAsterix$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoAsterix$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoAsterix$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresAsterix();
   AnalizadorLexicoAsterix alex = (AnalizadorLexicoAsterix)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresAsterix errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintacticoAsterix$actions {
  private final AnalizadorSintacticoAsterix parser;

  /** Constructor */
  CUP$AnalizadorSintacticoAsterix$actions(AnalizadorSintacticoAsterix parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoAsterix$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoAsterix$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoAsterix$parser,
    java.util.Stack            CUP$AnalizadorSintacticoAsterix$stack,
    int                        CUP$AnalizadorSintacticoAsterix$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoAsterix$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoAsterix$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAMA ::= DEF CUERPO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("PROGRAMA",19, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsterix$stack.elementAt(CUP$AnalizadorSintacticoAsterix$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoAsterix$parser.done_parsing();
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= CUERPO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("PROGRAMA",19, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= MAIN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("CUERPO",20, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= SUBPROGRAMAS MAIN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("CUERPO",20, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SUBPROGRAMAS ::= SUBPROGRAMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("SUBPROGRAMAS",21, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SUBPROGRAMAS ::= SUBPROGRAMAS SUBPROGRAMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("SUBPROGRAMAS",21, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MAIN ::= POTION PANOR PAA PAC FLECHA INTIX LLA S RET EXP0 PUNTOCOMA LLC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("MAIN",22, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEF ::= DECVAR PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("DEF",23, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DEF ::= DECVAR PUNTOCOMA DEF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("DEF",23, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECVAR ::= TIPO ID ASIG VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("DECVAR",2, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECVAR ::= TIPO ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("DECVAR",2, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECVAR ::= STRUCT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("DECVAR",2, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECVAR ::= ALIAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("DECVAR",2, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECVAR ::= ASIGNATION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("DECVAR",2, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ASIGNATION ::= EXP0 ASIG VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("ASIGNATION",35, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // S ::= I PUNTOCOMA S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // S ::= I PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // I ::= DECVAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("I",1, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // I ::= FOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("I",1, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // I ::= WHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("I",1, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // I ::= IFELSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("I",1, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // I ::= STILUS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("I",1, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // I ::= TAB 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("I",1, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // I ::= CALLF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("I",1, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VALOR ::= EXP0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("VALOR",3, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALOR ::= LISTA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("VALOR",3, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA ::= LLA LLC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("LISTA",13, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTA ::= LLA LISTAINT LLC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("LISTA",13, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTAINT ::= VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("LISTAINT",14, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTAINT ::= VALOR COMA LISTAINT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("LISTAINT",14, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ALIAS ::= DATIX ID TIPO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("ALIAS",15, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ALIAS ::= DATIX ID STRUCT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("ALIAS",15, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ALIAS ::= ID ID ASIG VALOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("ALIAS",15, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ALIAS ::= ID ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("ALIAS",15, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO ::= INTIX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("TIPO",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO ::= BOOLIX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("TIPO",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO ::= ENUMIX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("TIPO",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO ::= FLOATIX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("TIPO",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO ::= VECTIX MENOR TIPO MAYOR CORA INTEGER CORC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("TIPO",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // STRUCT ::= POT ID CORA STRUCTINT CORC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("STRUCT",17, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // STRUCTINT ::= DECVAR PUNTOCOMA STRUCTINT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("STRUCTINT",18, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STRUCTINT ::= DECVAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("STRUCTINT",18, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SUBPROGRAMA ::= POTION ID LARGP LLA S LLC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("SUBPROGRAMA",24, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SUBPROGRAMA ::= POTION ID LARGP FLECHA TIPO LLA S RET EXP0 PUNTOCOMA LLC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("SUBPROGRAMA",24, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LARGP ::= PAA PAC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("LARGP",25, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LARGP ::= PAA ARG PAC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("LARGP",25, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ARG ::= ID DOSPUNTOS VALREF COMA ARG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("ARG",26, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ARG ::= ID DOSPUNTOS VALREF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("ARG",26, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VALREF ::= TIPO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("VALREF",34, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VALREF ::= REF TIPO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("VALREF",34, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALREF ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("VALREF",34, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALREF ::= REF ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("VALREF",34, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CALLF ::= ID PAA PAC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("CALLF",27, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CALLF ::= ID PAA LARGC PAC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("CALLF",27, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LARGC ::= LARGC COMA EXP0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("LARGC",28, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LARGC ::= EXP0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("LARGC",28, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IFELSE ::= IF PAA EXP0 PAC LLA S LLC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("IFELSE",29, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IFELSE ::= IF PAA EXP0 PAC LLA S LLC ELSE LLA S LLC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("IFELSE",29, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // WHILE ::= WHILIX PAA EXP0 PAC LLA S LLC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("WHILE",30, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FOR ::= FORIX PAA TIPO ID DOSPUNTOS ID PAC LLA S LLC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("FOR",31, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TAB ::= TABEL PAA EXP0 PAC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("TAB",32, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // STILUS ::= STIL PAA EXP0 PAC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("STILUS",33, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP0 ::= EXP1 OR EXP0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP0",4, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP0 ::= EXP1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP0",4, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP1 ::= EXP2 AND EXP1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP1",5, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP1 ::= EXP2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP1",5, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP2 ::= EXP3 IGUAL EXP2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP2 ::= EXP3 DIS EXP2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP2 ::= EXP3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP3 ::= EXP4 MEIGUAL EXP3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP3",7, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP3 ::= EXP4 MAIGUAL EXP3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP3",7, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP3 ::= EXP4 MENOR EXP3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP3",7, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP3 ::= EXP4 MAYOR EXP3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP3",7, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP3 ::= EXP4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP3",7, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP4 ::= EXP4 MAS EXP5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP4",8, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP4 ::= EXP4 MENOS EXP5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP4",8, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP4 ::= EXP5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP4",8, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP5 ::= EXP5 MUL EXP6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP5",9, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP5 ::= EXP5 DIV EXP6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP5",9, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP5 ::= EXP5 MOD EXP6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP5",9, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP5 ::= EXP6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP5",9, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP6 ::= NOT EXP7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP6",10, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP6 ::= MENOS EXP6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP6",10, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP6 ::= EXP7 POW EXP6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP6",10, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP6 ::= EXP7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP6",10, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP7 ::= EXP7 PUNTO EXP8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP7 ::= EXP7 CORA EXP8 CORC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP7 ::= EXP8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP8 ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP8",12, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP8 ::= INTEGER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP8",12, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP8 ::= FLOATING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP8",12, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP8 ::= GALO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP8",12, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP8 ::= ROMANO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP8",12, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP8 ::= CALLF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP8",12, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP8 ::= PAA EXP0 PAC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsterix$result = parser.getSymbolFactory().newSymbol("EXP8",12, RESULT);
            }
          return CUP$AnalizadorSintacticoAsterix$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoAsterix$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoAsterix$do_action(
    int                        CUP$AnalizadorSintacticoAsterix$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoAsterix$parser,
    java.util.Stack            CUP$AnalizadorSintacticoAsterix$stack,
    int                        CUP$AnalizadorSintacticoAsterix$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoAsterix$do_action_part00000000(
                               CUP$AnalizadorSintacticoAsterix$act_num,
                               CUP$AnalizadorSintacticoAsterix$parser,
                               CUP$AnalizadorSintacticoAsterix$stack,
                               CUP$AnalizadorSintacticoAsterix$top);
    }
}

}
