
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat Mar 12 18:34:06 CET 2022
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoAsterix;
import alex.UnidadLexica;
import errors.GestionErroresAsterix;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat Mar 12 18:34:06 CET 2022
  */
public class AnalizadorSintacticoAsterix extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoAsterix() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoAsterix(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoAsterix(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\004\006" +
    "\000\002\004\004\000\002\004\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\005\000\002\006\003\000\002" +
    "\007\005\000\002\007\003\000\002\010\005\000\002\010" +
    "\005\000\002\010\003\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\003\000" +
    "\002\012\005\000\002\012\005\000\002\012\003\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\003\000\002\014\004\000\002\014\004\000\002\014\005" +
    "\000\002\014\003\000\002\015\005\000\002\015\006\000" +
    "\002\015\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\005\000\002\017\004\000\002\017\005\000\002\020\003" +
    "\000\002\020\005\000\002\021\005\000\002\021\005\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\011\000\002\023\007\000\002\024" +
    "\005\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\020\004\010\005\016\006\013\007\011\010" +
    "\006\011\017\012\004\001\002\000\004\066\142\001\002" +
    "\000\006\002\ufffd\013\ufffd\001\002\000\004\066\133\001" +
    "\002\000\010\002\ufffa\013\ufffa\024\ufffa\001\002\000\012" +
    "\002\uffd1\013\uffd1\022\uffd1\066\uffd1\001\002\000\012\002" +
    "\uffce\013\uffce\022\uffce\066\uffce\001\002\000\004\002\132" +
    "\001\002\000\012\002\uffcf\013\uffcf\022\uffcf\066\uffcf\001" +
    "\002\000\004\066\031\001\002\000\006\002\ufffe\013\ufffe" +
    "\001\002\000\012\002\uffd0\013\uffd0\022\uffd0\066\uffd0\001" +
    "\002\000\004\021\023\001\002\000\006\002\uffff\013\021" +
    "\001\002\000\020\004\010\005\016\006\013\007\011\010" +
    "\006\011\017\012\004\001\002\000\004\002\001\001\002" +
    "\000\014\004\010\005\016\006\013\007\011\011\017\001" +
    "\002\000\004\022\025\001\002\000\004\023\026\001\002" +
    "\000\004\015\027\001\002\000\004\024\030\001\002\000" +
    "\012\002\uffcd\013\uffcd\022\uffcd\066\uffcd\001\002\000\012" +
    "\002\ufffb\013\ufffb\024\ufffb\041\032\001\002\000\024\015" +
    "\051\016\047\017\050\020\054\025\055\027\046\032\036" +
    "\046\044\066\045\001\002\000\056\002\uffe1\013\uffe1\014" +
    "\uffe1\021\uffe1\022\uffe1\023\071\024\uffe1\026\uffe1\030\uffe1" +
    "\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037" +
    "\uffe1\040\uffe1\042\uffe1\043\uffe1\044\uffe1\045\130\054\070" +
    "\001\002\000\050\002\uffe5\013\uffe5\014\uffe5\021\uffe5\022" +
    "\uffe5\024\uffe5\026\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\042\uffe5\043" +
    "\uffe5\044\uffe5\001\002\000\050\002\uffe9\013\uffe9\014\uffe9" +
    "\021\uffe9\022\uffe9\024\uffe9\026\uffe9\030\uffe9\031\uffe9\032" +
    "\uffe9\033\120\034\121\035\uffe9\036\uffe9\037\uffe9\040\uffe9" +
    "\042\uffe9\043\uffe9\044\117\001\002\000\022\015\051\016" +
    "\047\017\050\020\054\025\055\032\036\046\044\066\045" +
    "\001\002\000\042\002\uffec\013\uffec\014\uffec\021\110\022" +
    "\111\024\uffec\026\uffec\030\uffec\031\105\032\107\035\uffec" +
    "\036\uffec\037\uffec\040\uffec\042\112\043\106\001\002\000" +
    "\026\002\ufff1\013\ufff1\014\ufff1\024\ufff1\026\ufff1\030\ufff1" +
    "\035\101\036\ufff1\037\ufff1\040\102\001\002\000\022\002" +
    "\ufff4\013\ufff4\014\ufff4\024\ufff4\026\ufff4\030\ufff4\036\ufff4" +
    "\037\077\001\002\000\020\002\ufff6\013\ufff6\014\ufff6\024" +
    "\ufff6\026\ufff6\030\ufff6\036\075\001\002\000\014\002\ufff9" +
    "\013\ufff9\014\ufff9\024\ufff9\030\ufff9\001\002\000\016\015" +
    "\051\016\047\017\050\020\054\025\055\066\045\001\002" +
    "\000\056\002\uffdd\013\uffdd\014\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\026\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\042\uffdd\043" +
    "\uffdd\044\uffdd\045\uffdd\054\uffdd\001\002\000\026\015\051" +
    "\016\047\017\050\020\054\025\055\027\046\030\061\032" +
    "\036\046\044\066\045\001\002\000\056\002\uffdb\013\uffdb" +
    "\014\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\026\uffdb\030" +
    "\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\054" +
    "\uffdb\001\002\000\056\002\uffda\013\uffda\014\uffda\021\uffda" +
    "\022\uffda\023\uffda\024\uffda\026\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda" +
    "\042\uffda\043\uffda\044\uffda\045\uffda\054\uffda\001\002\000" +
    "\056\002\uffdc\013\uffdc\014\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\024\uffdc\026\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034" +
    "\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\042\uffdc\043\uffdc" +
    "\044\uffdc\045\uffdc\054\uffdc\001\002\000\014\002\ufff8\013" +
    "\ufff8\014\ufff8\024\ufff8\030\ufff8\001\002\000\010\002\ufffc" +
    "\013\ufffc\024\ufffc\001\002\000\056\002\uffd9\013\uffd9\014" +
    "\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\026\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\054\uffd9" +
    "\001\002\000\022\015\051\016\047\017\050\020\054\025" +
    "\055\032\036\046\044\066\045\001\002\000\056\002\uffde" +
    "\013\uffde\014\uffde\021\uffde\022\uffde\023\uffde\024\uffde\026" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde" +
    "\036\uffde\037\uffde\040\uffde\042\uffde\043\uffde\044\uffde\045" +
    "\uffde\054\uffde\001\002\000\004\026\060\001\002\000\056" +
    "\002\uffd8\013\uffd8\014\uffd8\021\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\026\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\037\uffd8\040\uffd8\042\uffd8\043\uffd8\044" +
    "\uffd8\045\uffd8\054\uffd8\001\002\000\014\002\uffd7\013\uffd7" +
    "\014\uffd7\024\uffd7\030\uffd7\001\002\000\004\030\066\001" +
    "\002\000\006\014\064\030\uffd5\001\002\000\024\015\051" +
    "\016\047\017\050\020\054\025\055\027\046\032\036\046" +
    "\044\066\045\001\002\000\004\030\uffd4\001\002\000\014" +
    "\002\uffd6\013\uffd6\014\uffd6\024\uffd6\030\uffd6\001\002\000" +
    "\054\002\uffe4\013\uffe4\014\uffe4\021\uffe4\022\uffe4\023\071" +
    "\024\uffe4\026\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\042\uffe4\043\uffe4" +
    "\044\uffe4\054\070\001\002\000\016\015\051\016\047\017" +
    "\050\020\054\025\055\066\045\001\002\000\016\015\051" +
    "\016\047\017\050\020\054\025\055\066\045\001\002\000" +
    "\004\024\073\001\002\000\056\002\uffdf\013\uffdf\014\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\024\uffdf\026\uffdf\030\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\054\uffdf\001" +
    "\002\000\056\002\uffe0\013\uffe0\014\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\026\uffe0\030\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\042\uffe0" +
    "\043\uffe0\044\uffe0\045\uffe0\054\uffe0\001\002\000\022\015" +
    "\051\016\047\017\050\020\054\025\055\032\036\046\044" +
    "\066\045\001\002\000\016\002\ufff7\013\ufff7\014\ufff7\024" +
    "\ufff7\026\ufff7\030\ufff7\001\002\000\022\015\051\016\047" +
    "\017\050\020\054\025\055\032\036\046\044\066\045\001" +
    "\002\000\020\002\ufff5\013\ufff5\014\ufff5\024\ufff5\026\ufff5" +
    "\030\ufff5\036\ufff5\001\002\000\022\015\051\016\047\017" +
    "\050\020\054\025\055\032\036\046\044\066\045\001\002" +
    "\000\022\015\051\016\047\017\050\020\054\025\055\032" +
    "\036\046\044\066\045\001\002\000\022\002\ufff2\013\ufff2" +
    "\014\ufff2\024\ufff2\026\ufff2\030\ufff2\036\ufff2\037\ufff2\001" +
    "\002\000\022\002\ufff3\013\ufff3\014\ufff3\024\ufff3\026\ufff3" +
    "\030\ufff3\036\ufff3\037\ufff3\001\002\000\022\015\051\016" +
    "\047\017\050\020\054\025\055\032\036\046\044\066\045" +
    "\001\002\000\022\015\051\016\047\017\050\020\054\025" +
    "\055\032\036\046\044\066\045\001\002\000\022\015\051" +
    "\016\047\017\050\020\054\025\055\032\036\046\044\066" +
    "\045\001\002\000\022\015\051\016\047\017\050\020\054" +
    "\025\055\032\036\046\044\066\045\001\002\000\022\015" +
    "\051\016\047\017\050\020\054\025\055\032\036\046\044" +
    "\066\045\001\002\000\022\015\051\016\047\017\050\020" +
    "\054\025\055\032\036\046\044\066\045\001\002\000\026" +
    "\002\ufff0\013\ufff0\014\ufff0\024\ufff0\026\ufff0\030\ufff0\035" +
    "\ufff0\036\ufff0\037\ufff0\040\ufff0\001\002\000\026\002\uffed" +
    "\013\uffed\014\uffed\024\uffed\026\uffed\030\uffed\035\uffed\036" +
    "\uffed\037\uffed\040\uffed\001\002\000\026\002\uffee\013\uffee" +
    "\014\uffee\024\uffee\026\uffee\030\uffee\035\uffee\036\uffee\037" +
    "\uffee\040\uffee\001\002\000\050\002\uffea\013\uffea\014\uffea" +
    "\021\uffea\022\uffea\024\uffea\026\uffea\030\uffea\031\uffea\032" +
    "\uffea\033\120\034\121\035\uffea\036\uffea\037\uffea\040\uffea" +
    "\042\uffea\043\uffea\044\117\001\002\000\022\015\051\016" +
    "\047\017\050\020\054\025\055\032\036\046\044\066\045" +
    "\001\002\000\022\015\051\016\047\017\050\020\054\025" +
    "\055\032\036\046\044\066\045\001\002\000\022\015\051" +
    "\016\047\017\050\020\054\025\055\032\036\046\044\066" +
    "\045\001\002\000\050\002\uffe7\013\uffe7\014\uffe7\021\uffe7" +
    "\022\uffe7\024\uffe7\026\uffe7\030\uffe7\031\uffe7\032\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\042\uffe7" +
    "\043\uffe7\044\uffe7\001\002\000\050\002\uffe8\013\uffe8\014" +
    "\uffe8\021\uffe8\022\uffe8\024\uffe8\026\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\042\uffe8\043\uffe8\044\uffe8\001\002\000\050\002\uffe6" +
    "\013\uffe6\014\uffe6\021\uffe6\022\uffe6\024\uffe6\026\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6" +
    "\037\uffe6\040\uffe6\042\uffe6\043\uffe6\044\uffe6\001\002\000" +
    "\026\002\uffef\013\uffef\014\uffef\024\uffef\026\uffef\030\uffef" +
    "\035\uffef\036\uffef\037\uffef\040\uffef\001\002\000\050\002" +
    "\uffeb\013\uffeb\014\uffeb\021\uffeb\022\uffeb\024\uffeb\026\uffeb" +
    "\030\uffeb\031\uffeb\032\uffeb\033\120\034\121\035\uffeb\036" +
    "\uffeb\037\uffeb\040\uffeb\042\uffeb\043\uffeb\044\117\001\002" +
    "\000\050\002\uffe3\013\uffe3\014\uffe3\021\uffe3\022\uffe3\024" +
    "\uffe3\026\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\040\uffe3\042\uffe3\043\uffe3\044" +
    "\uffe3\001\002\000\022\015\051\016\047\017\050\020\054" +
    "\025\055\032\036\046\044\066\045\001\002\000\050\002" +
    "\uffe2\013\uffe2\014\uffe2\021\uffe2\022\uffe2\024\uffe2\026\uffe2" +
    "\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\042\uffe2\043\uffe2\044\uffe2\001\002" +
    "\000\004\002\000\001\002\000\004\023\134\001\002\000" +
    "\016\004\010\005\016\006\013\007\011\010\006\011\017" +
    "\001\002\000\006\013\140\024\uffca\001\002\000\004\024" +
    "\137\001\002\000\010\002\uffcc\013\uffcc\024\uffcc\001\002" +
    "\000\016\004\010\005\016\006\013\007\011\010\006\011" +
    "\017\001\002\000\004\024\uffcb\001\002\000\016\004\010" +
    "\005\016\006\013\007\011\010\006\011\017\001\002\000" +
    "\006\002\uffd2\013\uffd2\001\002\000\006\002\uffd3\013\uffd3" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\016\002\011\003\017\004\014\021\004\022" +
    "\013\023\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\002\021\003\017\004\014" +
    "\021\004\022\013\023\006\001\001\000\002\001\001\000" +
    "\004\022\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\052\006\042\007\041\010\040" +
    "\011\037\012\036\013\034\014\033\015\032\016\055\017" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\126\015\032\016\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\066\016\055\001" +
    "\001\000\002\001\001\000\032\005\062\006\042\007\041" +
    "\010\040\011\037\012\036\013\034\014\033\015\032\016" +
    "\055\017\051\020\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\056\007\041\010\040" +
    "\011\037\012\036\013\034\014\033\015\032\016\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\005\062\006\042\007\041\010\040\011\037\012\036" +
    "\013\034\014\033\015\032\016\055\017\051\020\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\073\001\001\000\004\016\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\006\075\007\041\010\040\011\037\012\036\013\034\014" +
    "\033\015\032\016\055\001\001\000\002\001\001\000\022" +
    "\007\077\010\040\011\037\012\036\013\034\014\033\015" +
    "\032\016\055\001\001\000\002\001\001\000\020\010\103" +
    "\011\037\012\036\013\034\014\033\015\032\016\055\001" +
    "\001\000\020\010\102\011\037\012\036\013\034\014\033" +
    "\015\032\016\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\125\014\033\015\032\016\055\001\001" +
    "\000\016\011\124\012\036\013\034\014\033\015\032\016" +
    "\055\001\001\000\012\013\115\014\033\015\032\016\055" +
    "\001\001\000\016\011\114\012\036\013\034\014\033\015" +
    "\032\016\055\001\001\000\016\011\113\012\036\013\034" +
    "\014\033\015\032\016\055\001\001\000\016\011\112\012" +
    "\036\013\034\014\033\015\032\016\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\123\015\032\016\055\001\001\000\010" +
    "\014\122\015\032\016\055\001\001\000\010\014\121\015" +
    "\032\016\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\130\015\032\016\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\134\022\013\023\006\024\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\134\022\013\023\006\024\140\001\001\000\002\001\001" +
    "\000\006\022\143\023\142\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresAsterix();
   AnalizadorLexicoAsterix alex = (AnalizadorLexicoAsterix)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresAsterix errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final AnalizadorSintacticoAsterix parser;

  /** Constructor */
  CUP$parser$actions(AnalizadorSintacticoAsterix parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= S1 PUNTOCOMA S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= S1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S1 ::= DECVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S1 ::= ALIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECVAR ::= TIPO ID ASIG VALOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECVAR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECVAR ::= TIPO ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECVAR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECVAR ::= STRUCT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECVAR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VALOR ::= EXP0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VALOR ::= LISTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXP0 ::= EXP1 OR EXP0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP0",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXP0 ::= EXP1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP0",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXP1 ::= EXP2 AND EXP1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXP1 ::= EXP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXP2 ::= EXP3 IGUAL EXP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXP2 ::= EXP3 DIS EXP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXP2 ::= EXP3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXP3 ::= EXP4 MEIGUAL EXP3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP3",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXP3 ::= EXP4 MAIGUAL EXP3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP3",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXP3 ::= EXP4 MENOR EXP3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP3",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXP3 ::= EXP4 MAYOR EXP3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP3",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXP3 ::= EXP4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP3",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXP4 ::= EXP4 MAS EXP5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP4",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXP4 ::= EXP4 MENOS EXP5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP4",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXP4 ::= EXP5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP4",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXP5 ::= EXP5 MUL EXP6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP5",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXP5 ::= EXP5 DIV EXP6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP5",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXP5 ::= EXP5 MOD EXP6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP5",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXP5 ::= EXP6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP5",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXP6 ::= NOT EXP7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP6",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXP6 ::= MENOS EXP6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP6",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXP6 ::= EXP7 POW EXP6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP6",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXP6 ::= EXP7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP6",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXP7 ::= EXP7 PUNTO EXP8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP7",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXP7 ::= EXP7 CORA EXP8 CORC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP7",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXP7 ::= EXP8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP7",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXP8 ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP8",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP8 ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP8",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP8 ::= FLOATING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP8",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP8 ::= GALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP8",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP8 ::= ROMANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP8",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP8 ::= PAA EXP0 PAC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP8",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTA ::= LLA LLC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LISTA ::= LLA LISTAINT LLC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LISTAINT ::= VALOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAINT",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LISTAINT ::= VALOR COMA LISTAINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAINT",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ALIAS ::= DATIX ID TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALIAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ALIAS ::= DATIX ID STRUCT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALIAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO ::= INTIX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPO ::= BOOLIX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPO ::= ENUMIX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPO ::= FLOATIX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPO ::= VECTIX MENOR TIPO MAYOR CORA INTEGER CORC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // STRUCT ::= POT ID CORA STRUCTINT CORC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // STRUCTINT ::= DECVAR PUNTOCOMA STRUCTINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTINT",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STRUCTINT ::= DECVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTINT",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

